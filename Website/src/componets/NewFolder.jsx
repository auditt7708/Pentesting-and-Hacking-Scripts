import React, { useState, useEffect } from 'react';

const FoldersComponent = () => {
  const [previousFolders, setPreviousFolders] = useState([]);
  const [newFolders, setNewFolders] = useState([]);
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [folderName, setFolderName] = useState('');
  const [folderDescription, setFolderDescription] = useState('');

  useEffect(() => {
    const fetchFolders = async () => {
      try {
        const response = await fetch('http://localhost:3000/api/folder');
        const data = await response.json();
        const folderdata = await data.folders;
        const previousFolders = folderdata.map(folder => ({ name: folder.name, html_url: folder.html_url }));
        setPreviousFolders(previousFolders);
        
        const githubResponse = await fetch('https://api.github.com/repos/avinashkranjan/Pentesting-and-Hacking-Scripts/contents');
        const githubData = await githubResponse.json();
        const latestFolders = githubData.filter(item => (item.type === 'dir' && !item.name.startsWith('.github')));
        const newFolders = latestFolders.filter(folder => !previousFolders.some(prevFolder => prevFolder.name === folder.name));
        console.log(newFolders);
        setNewFolders(newFolders);
      } catch (error) {
        console.error('Error fetching folders:', error);
      }
    };

    fetchFolders();
  }, []);

  const handleCardClick = (folder) => {
    setSelectedFolder(folder);
    setFolderName(folder.name);
    setFolderDescription(folder.description || '');
  };

  const handleFormSubmit = async (e) => {
    console.log(folderName);
    console.log("heelo"+folderDescription);
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3000/api/addfolder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: folderName,
          description: folderDescription
        })
      });
      const data = await response.json();
      console.log('Folder added:', data);
      // Reset form and selected folder
      setFolderName('');
      setFolderDescription('');
      setSelectedFolder(null);
    } catch (error) {
      console.error('Error adding folder:', error);
    }
  };

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">New Folders</h1>
      {newFolders.length === 0 ? (
        <p>No new folders found.</p>
      ) : (
        <div className="grid grid-cols-3 gap-4">
          {newFolders.map(folder => (
            <div
              key={folder.name}
              className="bg-white border border-bright rounded p-4 cursor-pointer"
              onClick={() => handleCardClick(folder)}
            >
              <a href={folder.html_url} className="text-bright font-bold">{folder.name}</a>
            </div>
          ))}
        </div>
      )}
      
      {selectedFolder && (
        <div className="mt-4">
          <h2 className="text-xl font-bold mb-2">Add Folder</h2>
          <form onSubmit={handleFormSubmit}>
            <div>
              <label className="block mb-2 font-bold">Name:</label>
              <input
                type="text"
                value={folderName}
                onChange={(e) => setFolderName(e.target.value)}
                className="border border-gray-400 px-2 py-1 rounded"
                required
              />
            </div>
            <div className="mt-2">
              <label className="block mb-2 font-bold">Description:</label>
              <textarea
                value={folderDescription}
                onChange={(e) => setFolderDescription(e.target.value)}
                className="border border-gray-400 px-2 py-1 rounded"
              />
            </div>
            <button type="submit" className="mt-4 bg-blue-500 text-white px-4 py-2 rounded">Add</button>
          </form>
        </div>
      )}
    </div>
  );
};

export default FoldersComponent;
